# Generated by Django 3.1.2 on 2021-04-05 17:54

import cm.db.attribute_field.model_field
import cm.db.fields
import cm.db.models.interface
import cm.db.models.pin
import cm.db.models.pin_assignment
import colorfield.fields
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Ancillary',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('ancillary_type', cm.db.fields.SmallTextField(choices=[('decoupling_capacitor', 'Decoupling Capacitor'), ('series_resistor', 'Series Resistor'), ('series_capacitor', 'Series Capacitor'), ('pull_up_resistor', 'Pull-up Resistor'), ('pull_up_capacitor', 'Pull-up Capacitor'), ('pull_down_resistor', 'Pull-down Resistor'), ('pull_down_capacitor', 'Pull-down Capacitor'), ('ferrite_bead', 'Ferrite Bead'), ('custom', 'Custom')])),
                ('applies_to', cm.db.fields.SmallTextField(choices=[('bus', 'Bus'), ('interface', 'Interface'), ('pins', 'Pins')], help_text='Pick what this ancillary applies to - to the pins of the bus, or the bus itself. Note that bus ancillaries can only be configured on interface families.')),
                ('maximum_latency', models.FloatField(default=0, help_text='Maximum signal latency from pin in picoseconds. Only applies to interface ancillary!')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttributeDefinition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField()),
                ('block_attribute', cm.db.fields.SmallTextField(blank=True, choices=[('', 'None'), ('name', 'Name'), ('part_number', 'Part Number'), ('manufacturer', 'Manufacturer')], default='')),
                ('datatype', cm.db.fields.SmallTextField(choices=[('str', 'String'), ('[str]', 'List of Strings (comma-separated)'), ('int', 'Integer'), ('bool', 'Boolean'), ('float', 'Float'), ('quantity', 'Quantity')])),
                ('unit', cm.db.fields.SmallTextField(blank=True, default='')),
                ('unit_description', cm.db.fields.SmallTextField(blank=True, default='')),
                ('choices', django.contrib.postgres.fields.ArrayField(base_field=cm.db.fields.SmallTextField(), blank=True, default=list, size=None)),
                ('is_required', models.BooleanField(default=False)),
                ('is_range', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('name', 'id'),
            },
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField(unique=True)),
                ('description', models.TextField(blank=True, default='')),
                ('block_type', models.CharField(choices=[('part', 'Part'), ('subcircuit', 'Sub-circuit')], max_length=10)),
                ('attributes', cm.db.attribute_field.model_field.AttributeField(blank=True, default=dict)),
                ('footprint_mapping', models.JSONField(blank=True, default=dict, help_text='Mapping of connectivity pins to footprint pads')),
                ('simplified_part', models.TextField(blank=True, default='', help_text='If this part differs in function from its datasheet or is otherwise simplified to overcome software limitations, please add some notes about this here.', verbose_name='Simplified part notes')),
                ('manual_only', models.BooleanField(default=False, help_text='This part should not be usable in the frontend', verbose_name='Manual Only')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlockFilter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('reference', cm.db.fields.SmallTextField(help_text='Local reference (only valid within sub-circuit).')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BusFragment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('from_filter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bus_fragments_from', to='db.blockfilter', verbose_name='from')),
            ],
            options={
                'verbose_name_plural': 'Bus Fragments',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('label', cm.db.fields.SmallTextField()),
                ('slug', models.SlugField(unique=True)),
                ('reference_label', cm.db.fields.SmallTextField(blank=True, help_text='Reference letter used for this category of part in schematics (e.g. R,C,...)')),
                ('background_color', colorfield.fields.ColorField(blank=True, max_length=18, null=True)),
                ('width', models.FloatField(blank=True, help_text='Default width for requirements of this category (in "rem")', null=True)),
                ('height', models.FloatField(blank=True, help_text='Default height for requirements of this category (in "rem")', null=True)),
                ('connector', models.BooleanField(default=False, help_text='Parts with this category (and all descendent categories) can be used as connectors')),
                ('icon', models.FileField(blank=True, help_text='SVG files only', null=True, upload_to='category_icons')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='db.category')),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Connectivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField(unique=True)),
                ('simplified_connectivity', models.TextField(blank=True, default='', help_text='If this connectivity differs in function from its datasheet or is otherwise simplified to overcome software limitations, please add some notes about this here.', verbose_name='Simplified connectivity notes')),
                ('use_for_ancillaries', models.BooleanField(default=False, help_text='Determines whether this connectivity can be used as an ancillary component.')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Connectivity',
                'verbose_name_plural': 'Connectivities',
            },
        ),
        migrations.CreateModel(
            name='ConnectorRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField(unique=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField()),
                ('function', cm.db.fields.SmallTextField(blank=True, choices=[('none', 'No Function'), ('reset', 'Reset'), ('enable', 'Enable'), ('data_bus', 'Data Bus'), ('power', 'Power Bus'), ('gnd', 'GND'), ('inherit', 'Inherit from interface type')], default='inherit', help_text='Specialised function of this interface', null=True)),
                ('is_required', models.BooleanField(default=False, help_text='Only available if the interface type has "can_be_required" set to true.')),
                ('channels', models.PositiveIntegerField(default=1, verbose_name='Number of channels')),
                ('max_child_interfaces', models.PositiveIntegerField(default=1, help_text='How many child interfaces of this interface can be used in parallel? (Only applies to parent interfaces)', validators=[cm.db.models.interface.SerializableMinValueValidator(1)])),
                ('connectivity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interfaces', to='db.connectivity')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('name', 'id'),
            },
        ),
        migrations.CreateModel(
            name='InterfaceFamily',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField(help_text='Human-readable name for this family')),
                ('label', cm.db.fields.SmallTextField(help_text='Label for this family, used in the software')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Interface Families',
            },
        ),
        migrations.CreateModel(
            name='InterfacePin',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('reference', cm.db.fields.SmallTextField(verbose_name='pin reference')),
                ('pin_type', models.CharField(choices=[('digital', 'Digital'), ('analog', 'Analog'), ('power', 'Power'), ('gnd', 'GND'), ('nc', 'N/C'), ('generic', 'Generic')], max_length=10)),
                ('description', cm.db.fields.SmallTextField(blank=True)),
                ('is_required', models.BooleanField(default=True)),
                ('multiple_use', models.BooleanField(default=False, help_text='Indicates whether this interface pin can be used multiple times in a single bus, i.e. the chip select pin of a SPI can be used multiple times ')),
                ('sharing', cm.db.fields.SmallTextField(choices=[('exclusive', 'Exclusive (Point-to-point) bus'), ('shared', 'Shared bus')], default='exclusive', help_text='Determines if and how pins of this type can be shared')),
                ('create_automatically', models.BooleanField(default=False, help_text='In a bulk import, automatically create an assignment (to all matching pins) if no assignment is explicitly given.')),
                ('compatible_pins', models.ManyToManyField(blank=True, help_text='First select which interface types this type is compatible with in general, then specify each pin.', related_name='_interfacepin_compatible_pins_+', to='db.InterfacePin')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('interface_type', 'reference', 'id'),
            },
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('name', 'id'),
            },
        ),
        migrations.CreateModel(
            name='Pin',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField()),
                ('number', cm.db.fields.SmallTextField(validators=[cm.db.models.pin.pin_order])),
                ('identifiers', django.contrib.postgres.fields.ArrayField(base_field=cm.db.fields.SmallTextField(), size=None)),
                ('_number_order', models.CharField(max_length=12)),
                ('pin_type', models.CharField(blank=True, choices=[('digital', 'Digital'), ('analog', 'Analog'), ('power', 'Power'), ('gnd', 'GND'), ('nc', 'N/C'), ('generic', 'Generic')], max_length=10)),
                ('connectivity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pins', to='db.connectivity')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('voltage_reference', models.ForeignKey(blank=True, limit_choices_to={'interface_type__function': 'power'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.interface')),
            ],
            options={
                'ordering': ('_number_order', 'name', 'id'),
                'unique_together': {('number', 'connectivity')},
            },
        ),
        migrations.CreateModel(
            name='SchematicSymbol',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='db.category')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PinAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('channel', models.PositiveIntegerField(default=0)),
                ('pin_identifiers', cm.db.fields.SmallTextField(blank=True, default='', help_text="Identifier string used to find the pins that should be assigned. This can be\n- a simple number (A37)\n- a list of pin numbers (A37,A55)\n- a list of pin numbers that have to be picked together with other pins ({A37,A55})\n- a wildcard indicating all pins of matching type (*)\n- a lookup checking pin parameters ([type=Digital, name~=SPI, number!=5])\n\nSupported operators on the lookups are\n= exact match\n>, >=, <, <= larger/smaller than (or equal to)\n~= contains (case-independent substring match)\n\nYou can also invert the matches by adding a ! before, e.g.\n- name!~=dig_ -> all pins whose name doesn't contain the string dig_\n- type!=Digital -> all non-digital pins\n", validators=[cm.db.models.pin_assignment.validate_pin_identifiers])),
                ('pin_identifiers_type', cm.db.fields.SmallTextField(choices=[('none', 'None'), ('wildcard', 'All Pins'), ('independent', 'Independent Pins'), ('dependent', 'Dependent Pins'), ('by_attributes', 'By Attributes')])),
                ('_cached_pin_ids', django.contrib.postgres.fields.ArrayField(base_field=models.UUIDField(), blank=True, default=list, size=None)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('interface', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pin_assignments', to='db.interface')),
                ('interface_pin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pin_assignments', to='db.interfacepin')),
                ('parent_interface_pin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='db.interfacepin')),
                ('pins', models.ManyToManyField(blank=True, related_name='assignments', to='db.Pin')),
            ],
            options={
                'ordering': ('interface__interface_type__name', 'id'),
            },
        ),
        migrations.CreateModel(
            name='InterfaceType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField(unique=True)),
                ('label', cm.db.fields.SmallTextField(help_text='The prefix used in interfaces of this type (GND, SPI, etc)')),
                ('description', models.TextField(blank=True)),
                ('interface_bulk_input_pattern', cm.db.fields.SmallTextField(blank=True, help_text='Regular expression for interface bulk input, e.g. SPI0_M.')),
                ('bulk_input_pattern', cm.db.fields.SmallTextField(blank=True, help_text='Regular expression for pin bulk input, e.g. SPI0_M_MISO')),
                ('allow_child_interfaces', models.BooleanField(default=False, help_text='Other interfaces can use interfaces of this type as a parent. (Used for SERCOMs, etc)')),
                ('function', cm.db.fields.SmallTextField(choices=[('none', 'No Function'), ('reset', 'Reset'), ('enable', 'Enable'), ('data_bus', 'Data Bus'), ('power', 'Power Bus'), ('gnd', 'GND')], default='none', help_text='Specialised function of this interface type')),
                ('can_be_required', models.BooleanField(default=True, help_text='Is it possible for interfaces of this type to be required? For example, a SPI master interface can never be required, but a UART interface might be required or not.')),
                ('can_be_specialised', models.BooleanField(default=False, help_text='A generic interface type that can be specialised as one or more other interface types. For example, a connector could be specialised to consist of SPI, I²C, Digital, etc.')),
                ('text_color', colorfield.fields.ColorField(default='#000000', max_length=18)),
                ('background_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18)),
                ('compatible_interface_types', models.ManyToManyField(blank=True, help_text='What other interface types can this type connect to? Should only be specified on child interfaces.', limit_choices_to={'children__isnull': True}, related_name='_interfacetype_compatible_interface_types_+', to='db.InterfaceType')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='interface_types', to='db.interfacefamily')),
                ('parents', models.ManyToManyField(blank=True, related_name='children', to='db.InterfaceType')),
            ],
            options={
                'ordering': ('name', 'id'),
            },
        ),
        migrations.AddField(
            model_name='interfacepin',
            name='interface_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pins', to='db.interfacetype'),
        ),
        migrations.AddField(
            model_name='interfacepin',
            name='parent_pins',
            field=models.ManyToManyField(blank=True, help_text='First assign a parent to the interface type, then select how to map each interface pin.', related_name='child_pins', to='db.InterfacePin'),
        ),
        migrations.CreateModel(
            name='InterfaceAttributesSet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('attributes', cm.db.attribute_field.model_field.AttributeField(blank=True, default=dict)),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interface_attributes_sets', to='db.block')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('interface_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes_sets', to='db.interfacetype')),
                ('interfaces', models.ManyToManyField(blank=True, related_name='attributes_sets', to='db.Interface')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InterfaceAdapter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('adapted_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adapters_adapted_from', to='db.interfacepin')),
                ('adapted_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adapters_adapted_to', to='db.interfacepin')),
                ('bus_fragment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interface_adapters', to='db.busfragment')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('original_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adapters_original_from', to='db.interfacepin')),
                ('original_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adapters_original_to', to='db.interfacepin')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='interface',
            name='interface_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='interfaces', to='db.interfacetype'),
        ),
        migrations.AddField(
            model_name='interface',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='Parent interface for grouped interfaces', limit_choices_to={'interface_type__allow_child_interfaces': True}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='db.interface'),
        ),
        migrations.CreateModel(
            name='Footprint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField()),
                ('source_file', cm.db.fields.SmallTextField(help_text='Temporary field to allow storing the local path of a component file. \nNote this only exists to allow the software to keep working while we transition to everything being stored in the database.')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='db.category')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FilterQuery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('operator', cm.db.fields.SmallTextField(choices=[('exact', 'Exact match'), ('iexact', 'Exact match (ignore case)'), ('contains', 'Contains'), ('icontains', 'Contains (ignore case)'), ('lt', 'Less than'), ('lte', 'Less than or equal to'), ('gt', 'Greater than'), ('gte', 'Greater than or equal to')])),
                ('value', cm.db.fields.SmallTextField()),
                ('attribute_definition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='db.attributedefinition')),
                ('block_filter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='queries', to='db.blockfilter')),
                ('connector_rule_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='from_queries', to='db.connectorrule')),
                ('connector_rule_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='to_queries', to='db.connectorrule')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Distributor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', cm.db.fields.SmallTextField(unique=True)),
                ('skus_priced_on_same_scale', models.BooleanField(verbose_name='Different SKU quantities are mixed when determining price')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='connectivity',
            name='schematic_symbol',
            field=models.ManyToManyField(blank=True, to='db.SchematicSymbol'),
        ),
        migrations.CreateModel(
            name='ConnectionRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('priority', models.PositiveIntegerField(default=10, help_text='Priority - lower number is higher priority.')),
                ('component_filter', cm.db.fields.SmallTextField(choices=[('microcontroller', 'Connect to Microcontroller'), ('vref', 'Connect to reference Voltage'), ('gnd', 'Connect to GND (of the reference voltage)')])),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('interface', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='connection_rules', to='db.interface')),
                ('interface_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='connection_rules', to='db.interfacetype')),
            ],
            options={
                'ordering': ('priority', 'id'),
            },
        ),
        migrations.AddField(
            model_name='busfragment',
            name='from_interface',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bus_fragments_from', to='db.interface'),
        ),
        migrations.AddField(
            model_name='busfragment',
            name='from_interface_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='bus_fragments_from', to='db.interfacetype'),
        ),
        migrations.AddField(
            model_name='busfragment',
            name='to_filter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bus_fragments_to', to='db.blockfilter', verbose_name='to'),
        ),
        migrations.AddField(
            model_name='busfragment',
            name='to_interface',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bus_fragments_to', to='db.interface'),
        ),
        migrations.AddField(
            model_name='busfragment',
            name='to_interface_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='bus_fragments_to', to='db.interfacetype'),
        ),
        migrations.AddField(
            model_name='blockfilter',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='block_filters', to='db.category'),
        ),
        migrations.AddField(
            model_name='blockfilter',
            name='connectivity',
            field=models.ForeignKey(blank=True, help_text='Specify a connectivity to be able to specify concrete interfaces in buses.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='block_filters', to='db.connectivity'),
        ),
        migrations.AddField(
            model_name='blockfilter',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='block',
            name='categories',
            field=mptt.fields.TreeManyToManyField(to='db.Category'),
        ),
        migrations.AddField(
            model_name='block',
            name='connectivity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='blocks', to='db.connectivity'),
        ),
        migrations.AddField(
            model_name='block',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='block',
            name='footprint',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='db.footprint'),
        ),
        migrations.AddField(
            model_name='attributedefinition',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='db.category'),
        ),
        migrations.AddField(
            model_name='attributedefinition',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='attributedefinition',
            name='interface_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='db.interfacetype'),
        ),
        migrations.CreateModel(
            name='AncillaryConnection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('role', cm.db.fields.SmallTextField(choices=[('input', 'Input'), ('output', 'Output'), ('v_ref', 'Vref'), ('gnd_ref', 'GNDref')], help_text='The role this pin plans on the ancillary. Inputs connect to the target, outputs to the rest of the circuit. Other options define special actions like connecting to a reference voltage.')),
                ('ancillary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections', to='db.ancillary')),
                ('ancillary_pin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pin_ancillary_connections', to='db.pin')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('interface_pin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ancillary_connections', to='db.interfacepin')),
                ('pin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ancillary_connections', to='db.pin')),
                ('pin_assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ancillary_connections', to='db.pinassignment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AncillaryAttribute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('operator', cm.db.fields.SmallTextField(choices=[('exact', 'Exact match'), ('closest', 'Closest possible value'), ('closest_larger', 'Closest possible larger value'), ('closest_smaller', 'Closest possible smaller value')])),
                ('value', cm.db.fields.SmallTextField()),
                ('ancillary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='db.ancillary')),
                ('attribute_definition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='db.attributedefinition')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='ancillary',
            name='connectivity',
            field=models.ForeignKey(limit_choices_to={'use_for_ancillaries': True}, on_delete=django.db.models.deletion.CASCADE, related_name='ancillaries', to='db.connectivity'),
        ),
        migrations.AddField(
            model_name='ancillary',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ancillary',
            name='interface',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ancillaries', to='db.interface'),
        ),
        migrations.AddField(
            model_name='ancillary',
            name='interface_family',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ancillaries', to='db.interfacefamily'),
        ),
        migrations.AddField(
            model_name='ancillary',
            name='interface_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ancillaries', to='db.interfacetype'),
        ),
        migrations.CreateModel(
            name='DirectAttributeDefinition',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('db.attributedefinition',),
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('db.block',),
        ),
        migrations.CreateModel(
            name='SubCircuit',
            fields=[
            ],
            options={
                'verbose_name': 'Sub-circuit',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('db.block',),
        ),
        migrations.AlterUniqueTogether(
            name='interfacepin',
            unique_together={('interface_type', 'reference')},
        ),
        migrations.AlterUniqueTogether(
            name='interface',
            unique_together={('name', 'connectivity', 'parent')},
        ),
        migrations.AddField(
            model_name='busfragment',
            name='subcircuit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bus_fragments', to='db.subcircuit'),
        ),
        migrations.AddField(
            model_name='blockfilter',
            name='subcircuit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='children', to='db.subcircuit'),
        ),
        migrations.AddField(
            model_name='ancillary',
            name='subcircuit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ancillaries', to='db.subcircuit'),
        ),
        migrations.CreateModel(
            name='PinUse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('block_filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pin_uses', to='db.blockfilter')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('interface', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pin_uses', to='db.interface')),
                ('interface_pin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pin_uses', to='db.interfacepin')),
                ('pin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='db.pin')),
                ('subcircuit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pin_uses', to='db.subcircuit')),
            ],
            options={
                'unique_together': {('subcircuit', 'block_filter', 'interface', 'interface_pin'), ('subcircuit', 'block_filter', 'interface', 'pin')},
            },
        ),
        migrations.CreateModel(
            name='ManufacturerPart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('part_number', cm.db.fields.SmallTextField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='db.manufacturer')),
                ('part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manufacturer_parts', to='db.part')),
            ],
            options={
                'ordering': ('manufacturer', 'part_number', 'id'),
                'unique_together': {('manufacturer', 'part_number')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='busfragment',
            unique_together={('from_filter', 'to_filter', 'from_interface', 'to_interface'), ('name', 'subcircuit')},
        ),
    ]
